AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Pandas Data Analyst Agent - Security Hardened

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]

Globals:
  Function:
    Timeout: 300
    MemorySize: 1024
    Runtime: python3.12
    ReservedConcurrentExecutions: 10
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    Environment:
      Variables:
        LOG_LEVEL: INFO
        RATE_LIMIT_ENABLED: 'true'
        AUTH_ENABLED: 'false'

Resources:
  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound

  # Lambda Function
  DataAnalystFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub PandasDataAnalystAgent-${Environment}
      Handler: lambda_function.lambda_handler
      CodeUri: src/
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DataBucket
        - Statement:
            Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Ref NvidiaSecret
      Environment:
        Variables:
          NVIDIA_API_KEY: !Sub '{{resolve:secretsmanager:${NvidiaSecret}:SecretString:api_key}}'
          DATA_BUCKET: !Ref DataBucket
      Events:
        ApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessRestApi
            Path: /analyze
            Method: POST

  # API Gateway with Usage Plan
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '$requestId $requestTime $httpMethod $resourcePath $status $responseLength $requestTime'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub ${AWS::StackName}-usage-plan
      Description: Usage plan for Pandas Data Analyst Agent
      ApiStages:
        - ApiId: !Ref ServerlessRestApi
          Stage: Prod
      Throttle:
        RateLimit: 100
        BurstLimit: 200
      Quota:
        Limit: 10000
        Period: DAY

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}
      RetentionInDays: 14

  # S3 Bucket with Access Logging
  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-access-logs-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-data-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogsBucket
        LogFilePrefix: data-bucket-access-logs/
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 30
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref S3LogGroup

  S3LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/s3/${AWS::StackName}
      RetentionInDays: 14

  # Secrets Manager
  NvidiaSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-nvidia-key
      Description: NVIDIA API Key
      SecretString: !Sub |
        {
          "api_key": "your-nvidia-api-key-here"
        }

  # CloudWatch Log Groups
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/PandasDataAnalystAgent-${Environment}
      RetentionInDays: 14

Outputs:
  ApiUrl:
    Description: API Gateway endpoint
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/analyze
    Export:
      Name: !Sub ${AWS::StackName}-ApiUrl
  
  DataBucket:
    Description: S3 data bucket
    Value: !Ref DataBucket
    Export:
      Name: !Sub ${AWS::StackName}-DataBucket

  UsagePlanId:
    Description: API Gateway Usage Plan ID
    Value: !Ref ApiGatewayUsagePlan
    Export:
      Name: !Sub ${AWS::StackName}-UsagePlan
